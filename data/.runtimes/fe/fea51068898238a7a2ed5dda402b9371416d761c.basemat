//ver=2
BaseMaterial<
				parent=Unigine::mesh_transparent
				guid=fea51068898238a7a2ed5dda402b9371416d761c
				manual=false
				
			>
{
	// optimization
	State static_shadow = false
	
Texture2DArray "8f0b1da8df486a941a5f2a91917ef4deff3baa5b"="guid://df7a5f2766dedfe11a5f2a91917ef4deff3baa5b" <shader_name="8f0b1da8df486a941a5f2a91917ef4deff3baa5b" editable=false wrap=[repeat_x repeat_y repeat_z ]>
Texture2D "c6178c5e6d7f77f90e843a369ad2b64326bb24e2"="guid://5219d6ddb5dbd1520e843a369ad2b64326bb24e2" <shader_name="c6178c5e6d7f77f90e843a369ad2b64326bb24e2" editable=false wrap=[repeat_x repeat_y repeat_z ]>
	Texture2D <source=linear_depth>
	Texture2D <source=screen_color_opacity>
	Texture2D <source=screen_color_old_reprojection>
Group "Parameters"
{
Texture2D "albedo"="guid://5219d6ddb5dbd1520e843a369ad2b64326bb24e2" <shader_name="var_4b93d8479cb2d112283ef34d1b437d234adde333" wrap=[repeat_x repeat_y repeat_z ]>
Texture2D "normal"="guid://692dbb7d56d633e22551bd47f4d92cd2d498270d" <shader_name="var_4ecc4d0fbb2a94083730bdf90f62e6fcbba6c66b" wrap=[repeat_x repeat_y repeat_z ]>
Color "glass_color"=[1.000000 1.000000 1.000000 1.000000] < shader_name="var_52854997220f39a72b46a06491c0ddf95b8f5fad">
Slider "metalness"=0.000000 <shared=false>
Slider "roughness"=0.000000 < min=0 max=1 shader_name="var_8a30ff5a7440ac3d77a2fe80fdba8de3db38aa7c">
Slider "specular"=0.400000 < min=0 max=1 shader_name="var_0afdf6074572a86081c3785fe8cc70369fee2bf4">
Slider "step_size"=0.200000 < min=0 max=1 shader_name="var_060e3d39f29b71c507b7a0fb80e61524ac9c683b">
Slider "step_size_noise"=0.050000 < min=0 max=1 shader_name="var_4cdac0153caa090faae54c62fa3890ae41d1e7f2">
Slider "use_albedo"=1.000000 < min=0 max=1 shader_name="var_cd31069a32fdb054bbbb2de5abd6efea071ffa60">
Group "dust_parameters"
{
Texture2D "dust_mask"="guid://5219d6ddb5dbd1520e843a369ad2b64326bb24e2" <shader_name="var_921f67e586377f48b5278032b1be8ea80dd30734" wrap=[repeat_x repeat_y repeat_z ]>
Color "dust_color"=[1.000000 1.000000 1.000000 1.000000] < shader_name="var_8c03cc7102560838f83169e0b7bcbf1009100922">
Slider "dust_intensity"=1.000000 < min=0 max=1.25 shader_name="var_55196789dfd958401879ff2d0170cf1681da3dc9">
Slider "dust_tiling"=1.000000 < min=0 max=1 shader_name="var_0db972fab6c60867bf453f2315cb8377703ef7be">
}
}
	State emission = true
	Option blend_src5
	Option blend_dest6
	State gbuffer = true

	
	Shader vertex_struct =
	#{
		INIT_BASE_DATA
		INIT_USER_DATA(float3, global_var_1ef54606f6729c15f0c1cc8c36839aab613b28a0)

		INIT_USER_DATA(float3, DATA_VERTEX_POSITION)
		MODIFIER_NOINTERPOLATION INIT_USER_DATA(float4x4, DATA_TRANSFORM)
		MODIFIER_NOINTERPOLATION INIT_USER_DATA(float4x4, DATA_ITRANSFORM)
		MODIFIER_NOINTERPOLATION INIT_USER_DATA(float3x3, DATA_OBJECT_ROTATION)
		
		MODIFIER_NOINTERPOLATION INIT_USER_DATA(uint, DATA_INSTANCE_ID)
		MODIFIER_NOINTERPOLATION INIT_USER_DATA(uint, DATA_VERTEX_ID)
	#}
	
	Shader common =
	#{
		#include <core/materials/shaders/render/graph/common.h>
		#ifdef FRAGMENT
			#include <core/materials/shaders/api/common.h>
			#include <core/materials/shaders/render/graph/base.h>
			#include <core/materials/shaders/render/graph/common.h>
			
			void _add_call_graph_wrapper(float in0,float in1,out float out0)
			{
				out0 = _add(in0,in1);
			
			}
			void _add_call_graph_wrapper(float3 in0,float3 in1,out float3 out0)
			{
				out0 = _add(in0,in1);
			
			}
			void _add_call_graph_wrapper(int in0,int in1,out int out0)
			{
				out0 = _add(in0,in1);
			
			}
			void _divide_call_graph_wrapper(float in0,float in1,out float out0)
			{
				out0 = _divide(in0,in1);
			
			}
			void _dot_product_call_graph_wrapper(float3 in0,float3 in1,out float out0)
			{
				out0 = _dot_product(in0,in1);
			
			}
			void _equal_call_graph_wrapper(int in0,int in1,out bool out0)
			{
				out0 = _equal(in0,in1);
			
			}
			void _greater_call_graph_wrapper(float in0,float in1,out bool out0)
			{
				out0 = _greater(in0,in1);
			
			}
			void _less_call_graph_wrapper(float in0,float in1,out bool out0)
			{
				out0 = _less(in0,in1);
			
			}
			void _logical_and_call_graph_wrapper(bool in0,bool in1,out bool out0)
			{
				out0 = _logical_and(in0,in1);
			
			}
			void _multiply_call_graph_wrapper(float in0,float in1,out float out0)
			{
				out0 = _multiply(in0,in1);
			
			}
			void _multiply_call_graph_wrapper(float2 in0,float2 in1,out float2 out0)
			{
				out0 = _multiply(in0,in1);
			
			}
			void _multiply_call_graph_wrapper(float3 in0,float3 in1,out float3 out0)
			{
				out0 = _multiply(in0,in1);
			
			}
			void _multiply_call_graph_wrapper(int in0,int in1,out int out0)
			{
				out0 = _multiply(in0,in1);
			
			}
			void _subtract_call_graph_wrapper(float in0,float in1,out float out0)
			{
				out0 = _subtract(in0,in1);
			
			}
			void abs_call_graph_wrapper(float2 in0,out float2 out0)
			{
				out0 = abs(in0);
			
			}
			void clamp_call_graph_wrapper(float in0,float in1,float in2,out float out0)
			{
				out0 = clamp(in0,in1,in2);
			
			}
			void distance_call_graph_wrapper(float3 in0,float3 in1,out float out0)
			{
				out0 = distance(in0,in1);
			
			}
			void fmod_call_graph_wrapper(float in0,float in1,out float out0)
			{
				out0 = fmod(in0,in1);
			
			}
			void fmod_call_graph_wrapper(float2 in0,float2 in1,out float2 out0)
			{
				out0 = fmod(in0,in1);
			
			}
			void frac_call_graph_wrapper(float3 in0,out float3 out0)
			{
				out0 = frac(in0);
			
			}
			void length_call_graph_wrapper(float3 in0,out float out0)
			{
				out0 = length(in0);
			
			}
			void lerp_call_graph_wrapper(float in0,float in1,float in2,out float out0)
			{
				out0 = lerp(in0,in1,in2);
			
			}
			void lerp_call_graph_wrapper(float3 in0,float3 in1,float3 in2,out float3 out0)
			{
				out0 = lerp(in0,in1,in2);
			
			}
			void min_call_graph_wrapper(float in0,float in1,out float out0)
			{
				out0 = min(in0,in1);
			
			}
			void positionToScreenUV_call_graph_wrapper(float3 in0,out float2 out0)
			{
				out0 = positionToScreenUV(in0);
			
			}
			void pow_call_graph_wrapper(float in0,float in1,out float out0)
			{
				out0 = pow(in0,in1);
			
			}
			void reflect_call_graph_wrapper(float3 in0,float3 in1,out float3 out0)
			{
				out0 = reflect(in0,in1);
			
			}
			void rerange_call_graph_wrapper(float2 in0,float in1,float in2,float in3,float in4,out float2 out0)
			{
				out0 = rerange(in0,in1,in2,in3,in4);
			
			}
			void saturate_call_graph_wrapper(float in0,out float out0)
			{
				out0 = saturate(in0);
			
			}
			void saturate_call_graph_wrapper(float2 in0,out float2 out0)
			{
				out0 = saturate(in0);
			
			}
			void sign_call_graph_wrapper(float in0,out float out0)
			{
				out0 = sign(in0);
			
			}
			void smoothstep_call_graph_wrapper(float in0,float in1,float in2,out float out0)
			{
				out0 = smoothstep(in0,in1,in2);
			
			}
			void srgbInv_call_graph_wrapper(float4 in0,out float4 out0)
			{
				out0 = srgbInv(in0);
			
			}
			
		#elif VERTEX
			
			
		#elif EVALUATE
			
			
		#endif
		
		#ifdef PASS_SHADOW
			#define IS_SHADOW true
		#else
			#define IS_SHADOW false
		#endif
		
		#ifdef PASS_AUXILIARY
			#define IS_AUXILIARY true
		#else
			#define IS_AUXILIARY false
		#endif
		
		#ifdef PASS_DEFERRED
			#define IS_GBUFFER true
		#else
			#define IS_GBUFFER false
		#endif
		
		#ifdef BAKING_GI
			#define IS_BAKING_GI true
		#else
			#define IS_BAKING_GI false
		#endif
		
		#ifdef STATE_LIGHTMAP
			#define IS_LIGHTMAP true
		#else
			#define IS_LIGHTMAP false
		#endif
	#}
	
	Shader vertex =
	#{
		DATA_INSTANCE_ID = IN_INSTANCE;
		DATA_VERTEX_ID = IN_VERTEX_ID;
		DATA_TRANSFORM = VERTEX_IN_TRANSFORM;
		DATA_ITRANSFORM = inverseTransform(DATA_TRANSFORM);
		DATA_OBJECT_ROTATION = orthonormalize(toFloat3x3(DATA_TRANSFORM));
		DATA_VERTEX_POSITION = VERTEX_IN_POSITION;
		
		const float3 object_position = colW(DATA_TRANSFORM).xyz;
		
		const float4x4 object_to_view = DATA_TRANSFORM;
		const float4x4 view_to_object = DATA_ITRANSFORM;
		
		const float4x4 absolute_world_to_view = VERTEX_IN_MODELVIEW;
		const float4x4 view_to_absolute_world = VERTEX_IN_IMODELVIEW;
		
		const float3x3 camera_world_to_view = toFloat3x3(VERTEX_IN_MODELVIEW);
		const float3x3 view_to_camera_world = toFloat3x3(VERTEX_IN_IMODELVIEW);
		
		const float4x4 object_to_absolute_world = mul4(view_to_absolute_world, object_to_view);
		const float4x4 absolute_world_to_object = mul4(view_to_object, absolute_world_to_view);
		
		const float4x4 object_to_camera_world = mul4(camera_world_to_view, object_to_view);
		const float4x4 camera_world_to_object = mul4(view_to_object, view_to_camera_world);
		
		const float3x3 rotate_object_to_view = DATA_OBJECT_ROTATION;
		const float3x3 rotate_view_to_tangent = matrix3Row(DATA_TANGENT, DATA_BINORMAL, DATA_NORMAL);
		const float3x3 rotate_view_to_world = view_to_camera_world;
		
		const float3x3 rotate_object_to_world = mul3(rotate_view_to_world, rotate_object_to_view);
		const float3x3 rotate_world_to_tangent = mul3(rotate_view_to_tangent, camera_world_to_view);
		const float3x3 rotate_object_to_tangent = mul3(rotate_view_to_tangent, rotate_object_to_view);
		
		const uint2 screen_resolution = toUInt2(s_viewport.xy);
		const float2 screen_iresolution = s_viewport.zw;
		const float2 screen_uv = positionToScreenUV(DATA_POSITION);
		const uint2 screen_coord = toUInt2(screen_uv * s_viewport.xy);
		
		const float3 view_direction = positionToViewDirection(DATA_POSITION);
		
		const float auto_time = VERTEX_IN_TIME;
		const float auto_game_time = VERTEX_IN_GAME_TIME;
		
		const float2 cord_sample_Texture2D = DATA_UV.xy;
		const float2 cord_sample_Texture2DInt = DATA_UV.xy;
		const float2 cord_sample_Texture2DUint = DATA_UV.xy;
		const float2 cord_sample_Texture2DArray = DATA_UV.xy;
		const float  cord_sample_TextureRamp = DATA_UV.x;
		const float3 cord_sample_Texture3D = DATA_VERTEX_POSITION;
		const float3 cord_sample_TextureCube = mul3(rotate_view_to_world, reflect(-view_direction, DATA_NORMAL));
		
		#define NORMAL_TS_UV1(NORMAL_TS)
		#define NORMAL_TS_AUTO(NORMAL_TS, UV)
		
		global_var_1ef54606f6729c15f0c1cc8c36839aab613b28a0 = mul4(object_to_view, DATA_VERTEX_POSITION).xyz;
		float3 global_var_aa073e78ad728fe9cc8e46c0916ba6829899c10e = float3_zero;
		global_var_aa073e78ad728fe9cc8e46c0916ba6829899c10e = mul3(rotate_view_to_tangent, view_direction);
		
		
		#undef NORMAL_TS_UV1
		#undef NORMAL_TS_AUTO
	#}
	Shader evaluate =
	#{
		const float3 object_position = colW(DATA_TRANSFORM).xyz;
		
		const float4x4 object_to_view = DATA_TRANSFORM;
		const float4x4 view_to_object = DATA_ITRANSFORM;
		
		const float4x4 absolute_world_to_view = s_modelview;
		const float4x4 view_to_absolute_world = s_imodelview;
		
		const float3x3 camera_world_to_view = toFloat3x3(s_modelview);
		const float3x3 view_to_camera_world = toFloat3x3(s_imodelview);
		
		const float4x4 object_to_absolute_world = mul4(view_to_absolute_world, object_to_view);
		const float4x4 absolute_world_to_object = mul4(view_to_object, absolute_world_to_view);
		
		const float4x4 object_to_camera_world = mul4(view_to_camera_world, object_to_view);
		const float4x4 camera_world_to_object = mul4(view_to_object, camera_world_to_view);
		
		const float3x3 rotate_object_to_view = DATA_OBJECT_ROTATION;
		const float3x3 rotate_view_to_tangent = matrix3Row(DATA_TANGENT, DATA_BINORMAL, DATA_NORMAL);
		const float3x3 rotate_view_to_world = view_to_camera_world;
		
		const float3x3 rotate_object_to_world = mul3(rotate_view_to_world, rotate_object_to_view);
		const float3x3 rotate_world_to_tangent = mul3(rotate_view_to_tangent, camera_world_to_view);
		const float3x3 rotate_object_to_tangent = mul3(rotate_view_to_tangent, rotate_object_to_view);
		
		const uint2 screen_resolution = toUInt2(s_viewport.xy);
		const float2 screen_iresolution = s_viewport.zw;
		const float2 screen_uv = positionToScreenUV(DATA_POSITION);
		const uint2 screen_coord = toUInt2(screen_uv * s_viewport.xy);
		
		const float3 view_direction = positionToViewDirection(DATA_POSITION);
		
		const float auto_time = s_time;
		const float auto_game_time = s_game_time;
		
		const float2 cord_sample_Texture2D = DATA_UV.xy;
		const float2 cord_sample_Texture2DInt = DATA_UV.xy;
		const float2 cord_sample_Texture2DUint = DATA_UV.xy;
		const float2 cord_sample_Texture2DArray = DATA_UV.xy;
		const float  cord_sample_TextureRamp = DATA_UV.x;
		const float3 cord_sample_Texture3D = DATA_VERTEX_POSITION;
		const float3 cord_sample_TextureCube = mul3(rotate_view_to_world, reflect(-view_direction, DATA_NORMAL));
		
		#define NORMAL_TS_UV1(NORMAL_TS)
		#define NORMAL_TS_AUTO(NORMAL_TS, UV)
		
		
		
		#undef NORMAL_TS_UV1
		#undef NORMAL_TS_AUTO
	#}
	
	Shader fragment =
	#{
		const float3 object_position = colW(DATA_TRANSFORM).xyz;
		
		const float4x4 object_to_view = DATA_TRANSFORM;
		const float4x4 view_to_object = DATA_ITRANSFORM;
		
		const float4x4 absolute_world_to_view = s_modelview;
		const float4x4 view_to_absolute_world = s_imodelview;
		
		const float3x3 camera_world_to_view = toFloat3x3(s_modelview);
		const float3x3 view_to_camera_world = toFloat3x3(s_imodelview);
		
		const float4x4 object_to_absolute_world = mul4(view_to_absolute_world, object_to_view);
		const float4x4 absolute_world_to_object = mul4(view_to_object, absolute_world_to_view);
		
		const float4x4 object_to_camera_world = mul4(view_to_camera_world, object_to_view);
		const float4x4 camera_world_to_object = mul4(view_to_object, camera_world_to_view);
		
		
		normalizationTBN(DATA_TANGENT, DATA_BINORMAL, DATA_NORMAL, DATA_SIGN_BINORMAL);
		
		const float3x3 rotate_object_to_view = DATA_OBJECT_ROTATION;
		const float3x3 rotate_view_to_tangent = matrix3Row(DATA_TANGENT, DATA_BINORMAL, DATA_NORMAL);
		const float3x3 rotate_view_to_world = view_to_camera_world;
		
		const float3x3 rotate_object_to_world = mul3(rotate_view_to_world, rotate_object_to_view);
		const float3x3 rotate_world_to_tangent = mul3(rotate_view_to_tangent, camera_world_to_view);
		const float3x3 rotate_object_to_tangent = mul3(rotate_view_to_tangent, rotate_object_to_view);
		
		
		const float3 N = DATA_NORMAL;
		float3 T_DY = cross(ddy(DATA_POSITION), DATA_NORMAL);
		float3 T_DX = cross(DATA_NORMAL, ddx(DATA_POSITION));
		
		float3x3 rotate_tangent_uv1_to_uv0;
		{
			float3 T = T_DY * ddx(DATA_UV.z) + T_DX * ddy(DATA_UV.z);
			T = normalize(N * dot(T, N) - T);
			float3 B = cross(T, N);
			rotate_tangent_uv1_to_uv0 = mul3(rotate_view_to_tangent, matrix3Col(T,B,N));
		}
		
		#define NORMAL_TS_UV1(NORMAL_TS) NORMAL_TS = mul3(rotate_tangent_uv1_to_uv0, NORMAL_TS);
		#define NORMAL_TS_AUTO(NORMAL_TS, UV)\
		{\
			float3 T = T_DY * ddx(UV.x) + T_DX * ddy(UV.x);\
			T = normalize(N * dot(T, N) - T);\
			float3 B = cross(T, N);\
			NORMAL_TS = mul3(matrix3Col(T,B,N), NORMAL_TS);\
			NORMAL_TS = mul3(DATA_TANGENT, DATA_BINORMAL, DATA_NORMAL, NORMAL_TS);\
		}
		
		const uint2 screen_resolution = toUInt2(s_viewport.xy);
		const float2 screen_iresolution = s_viewport.zw;
		const uint2 screen_coord = toUInt2(IN_POSITION.xy);
		const float2 screen_uv = IN_POSITION.xy * s_viewport.zw;
		
		const float3 view_direction = positionToViewDirection(DATA_POSITION);
		
		const float auto_time = s_time;
		const float auto_game_time = s_game_time;
		
		const float2 cord_sample_Texture2D = DATA_UV.xy;
		const float2 cord_sample_Texture2DInt = DATA_UV.xy;
		const float2 cord_sample_Texture2DArray = DATA_UV.xy;
		const float  cord_sample_TextureRamp = DATA_UV.x;
		const float3 cord_sample_Texture3D = DATA_VERTEX_POSITION;
		const float3 cord_sample_TextureCube = mul3(rotate_view_to_world, reflect(-view_direction, DATA_NORMAL));
		
		#ifdef OPTION_TRANSPARENT
			float shadow_clip_threshold = 0.5f;
		#endif
		#ifdef OPTION_TRANSPARENT || ALPHA_TEST
			float auxiliary_clip_threshold = 0.5f;
		#endif
		
		float3 var_206 = float3_zero;
		float var_205 = float_zero;
		float3 var_204 = float3_zero;
		float var_203 = float_zero;
		float var_202 = float_zero;
		float3 var_201 = float3_zero;
		float3 var_200 = float3_zero;
		float var_199 = float_zero;
		float3 var_198 = float3_zero;
		float var_197 = float_zero;
		float var_196 = float_zero;
		float3 var_195 = float3_zero;
		float3 var_194 = float3_zero;
		float3 var_193 = float3_zero;
		float3 var_192 = float3_zero;
		float3 var_191 = float3_zero;
		float4 var_190 = float4_zero;
		float4 var_189 = float4_zero;
		float var_188 = float_zero;
		float var_187 = float_zero;
		float var_186 = float_zero;
		float var_185 = float_zero;
		float var_184 = float_zero;
		float2 var_183 = float2_zero;
		float3 var_182 = float3_zero;
		float3 var_181 = float3_zero;
		float3 var_180 = float3_zero;
		float var_179 = float_zero;
		float var_178 = float_zero;
		float var_177 = float_zero;
		float var_176 = float_zero;
		bool var_175 = bool_zero;
		float var_174 = float_zero;
		float2 var_173 = float2_zero;
		int var_172 = int_zero;
		int var_171 = int_zero;
		float var_170 = float_zero;
		bool var_169 = bool_zero;
		bool var_168 = bool_zero;
		bool var_167 = bool_zero;
		bool var_166 = bool_zero;
		float var_165 = float_zero;
		float var_164 = float_zero;
		float var_163 = float_zero;
		float var_162 = float_zero;
		float2 var_161 = float2_zero;
		float var_160 = float_zero;
		float var_159 = float_zero;
		float2 var_158 = float2_zero;
		float2 var_157 = float2_zero;
		float2 var_156 = float2_zero;
		float2 var_155 = float2_zero;
		float2 var_154 = float2_zero;
		float var_153 = float_zero;
		float var_152 = float_zero;
		float var_151 = float_zero;
		float2 var_150 = float2_zero;
		float2 var_149 = float2_zero;
		float var_148 = float_zero;
		float var_147 = float_zero;
		float var_146 = float_zero;
		float3 var_145 = float3_zero;
		float3 var_144 = float3_zero;
		float3 var_143 = float3_zero;
		float var_142 = float_zero;
		float var_141 = float_zero;
		float var_140 = float_zero;
		float var_139 = float_zero;
		float var_138 = float_zero;
		float var_137 = float_zero;
		float2 var_136 = float2_zero;
		float3 var_135 = float3_zero;
		int var_134 = int_zero;
		float3 var_132 = float3_zero;
		float3 var_131 = float3_zero;
		float var_130 = float_zero;
		float var_129 = float_zero;
		float var_128 = float_zero;
		float var_127 = float_zero;
		bool var_126 = bool_zero;
		float var_125 = float_zero;
		float var_124 = float_zero;
		int var_123 = int_zero;
		int var_122 = int_zero;
		int var_121 = int_zero;
		int var_120 = int_zero;
		float3 var_119 = float3_zero;
		int var_118 = int_zero;
		float3 var_116 = float3_zero;
		float var_115 = float_zero;
		float var_114 = float_zero;
		float var_113 = float_zero;
		float var_112 = float_zero;
		float var_111 = float_zero;
		float var_110 = float_zero;
		float3 var_109 = float3_zero;
		float var_108 = float_zero;
		float var_107 = float_zero;
		float var_106 = float_zero;
		float var_105 = float_zero;
		float var_104 = float_zero;
		float var_103 = float_zero;
		float var_102 = float_zero;
		float var_101 = float_zero;
		float var_100 = float_zero;
		float var_99 = float_zero;
		float3 var_98 = float3_zero;
		float var_97 = float_zero;
		float var_96 = float_zero;
		float var_95 = float_zero;
		float var_94 = float_zero;
		float var_93 = float_zero;
		float var_92 = float_zero;
		float var_91 = float_zero;
		float var_90 = float_zero;
		float3 var_89 = float3_zero;
		float var_88 = float_zero;
		float var_87 = float_zero;
		float var_86 = float_zero;
		float var_85 = float_zero;
		float var_84 = float_zero;
		float3 var_83 = float3_zero;
		float var_82 = float_zero;
		float var_81 = float_zero;
		float3 var_80 = float3_zero;
		float3 var_79 = float3_zero;
		float var_78 = float_zero;
		float var_77 = float_zero;
		float var_76 = float_zero;
		float var_75 = float_zero;
		float3 var_74 = float3_zero;
		float var_73 = float_zero;
		float3 var_72 = float3_zero;
		float4 var_71 = float4_zero;
		float var_70 = float_zero;
		float var_69 = float_zero;
		float var_68 = float_zero;
		float3 var_67 = float3_zero;
		float var_66 = float_zero;
		float var_65 = float_zero;
		float var_64 = float_zero;
		float var_63 = float_zero;
		float var_62 = float_zero;
		float var_61 = float_zero;
		float var_60 = float_zero;
		float var_59 = float_zero;
		float var_58 = float_zero;
		float var_57 = float_zero;
		float3 var_56 = float3_zero;
		float var_55 = float_zero;
		float var_54 = float_zero;
		float var_53 = float_zero;
		float4 var_52 = float4_zero;
		float var_51 = float_zero;
		float var_50 = float_zero;
		float var_49 = float_zero;
		float3 var_48 = float3_zero;
		float4 var_47 = float4_zero;
		float3 var_46 = float3_zero;
		float var_45 = float_zero;
		float var_44 = float_zero;
		float var_43 = float_zero;
		float var_42 = float_zero;
		float3 var_41 = float3_zero;
		float4 var_40 = float4_zero;
		float3 var_39 = float3_zero;
		float4 var_38 = float4_zero;
		float var_37 = float_zero;
		float var_36 = float_zero;
		float2 var_35 = float2_zero;
		float3 var_34 = float3_zero;
		float var_33 = float_zero;
		float var_32 = float_zero;
		float4 var_31 = float4_zero;
		float4 var_30 = float4_zero;
		float var_29 = float_zero;
		float3 var_28 = float3_zero;
		float4 var_27 = float4_zero;
		float var_26 = float_zero;
		float var_25 = float_zero;
		float var_24 = float_zero;
		float var_23 = float_zero;
		float var_22 = float_zero;
		float var_21 = float_zero;
		float var_20 = float_zero;
		float var_19 = float_zero;
		float var_18 = float_zero;
		float4 var_17 = float4_zero;
		float4 var_16 = float4_zero;
		float var_15 = float_zero;
		float3 var_14 = float3_zero;
		float3 var_13 = float3_zero;
		float3 var_12 = float3_zero;
		float3 var_11 = float3_zero;
		float4 var_10 = float4_zero;
		float var_9 = float_zero;
		float var_8 = float_zero;
		float4 var_7 = float4_zero;
		float3 var_6 = float3_zero;
		float4 var_5 = float4_zero;
		float2 var_4 = float2_zero;
		float var_3 = float_zero;
		float4 var_2 = float4_zero;
		float4 var_1 = float4_zero;
		float3 global_var_aa073e78ad728fe9cc8e46c0916ba6829899c10e = float3_zero;
		global_var_aa073e78ad728fe9cc8e46c0916ba6829899c10e = mul3(rotate_view_to_tangent, view_direction);
		var_1 = TEXTURE(var_4b93d8479cb2d112283ef34d1b437d234adde333, cord_sample_Texture2D);
		var_2 = var_1;
		var_3 = _make_expr_float( var_2.w);
		_multiply_call_graph_wrapper(DATA_UV.xy,toFloat2(var_0db972fab6c60867bf453f2315cb8377703ef7be),var_4);
		var_5 = var_8c03cc7102560838f83169e0b7bcbf1009100922;
		var_6 = _make_expr_float3( var_5.xyz);
		var_7 = TEXTURE(var_921f67e586377f48b5278032b1be8ea80dd30734, DATA_UV.zw);
		var_8 = var_55196789dfd958401879ff2d0170cf1681da3dc9;
		var_9 = _make_expr_float(1- var_8.x-.3);
		var_10 = TEXTURE(var_4ecc4d0fbb2a94083730bdf90f62e6fcbba6c66b, cord_sample_Texture2D);
		var_11 = _color_to_normal_ts(var_10, 1.0f);
		var_12 = view_direction;
		var_13 = _make_expr_float3(- var_12.x,- var_12.y,- var_12.z);
		var_14 = mul3(float3(0.000000f,0.000000f,1.000000f), rotate_view_to_tangent);
		fmod_call_graph_wrapper(toFloat(s_frame),toFloat(make_int(16)),var_15);
		var_16 = TEXTURE(tex_screen_color_opacity, screen_uv);
		srgbInv_call_graph_wrapper(var_52854997220f39a72b46a06491c0ddf95b8f5fad,var_17);
		var_18 = 0.000000f;
		var_19 = _make_expr_float(1- var_18.x);
		pow_call_graph_wrapper(var_0afdf6074572a86081c3785fe8cc70369fee2bf4,2.200000f,var_20);
		var_21 = 0.000000f;
		var_22 = _make_expr_float(1- var_21.x);
		var_23 = 0.000000f;
		var_24 = _make_expr_float(1- var_23.x);
		pow_call_graph_wrapper(var_0afdf6074572a86081c3785fe8cc70369fee2bf4,1.200000f,var_25);
		lerp_call_graph_wrapper(5.000000f,4.000000f,0.000000f,var_26);
		var_27 = var_1;
		var_28 = _make_expr_float3( var_27.xyz);
		_multiply_call_graph_wrapper(var_3,var_cd31069a32fdb054bbbb2de5abd6efea071ffa60,var_29);
		var_30 = TEXTURE(c6178c5e6d7f77f90e843a369ad2b64326bb24e2, var_4);
		var_31 = var_7;
		var_32 = _make_expr_float( var_31.x);
		saturate_call_graph_wrapper(var_9,var_33);
		reflect_call_graph_wrapper(var_13,var_14,var_34);
		fmod_call_graph_wrapper(toFloat2(toInt2(screen_coord)),toFloat2(256.000000f),var_35);
		_multiply_call_graph_wrapper(var_15,GOLDEN_RATIO,var_36);
		_add_call_graph_wrapper(0.150000f,0.000100f,var_37);
		var_38 = var_16;
		var_39 = _make_expr_float3( var_38.xyz);
		var_40 = var_17;
		var_41 = _make_expr_float3( var_40.xyz);
		pow_call_graph_wrapper(0.000000f,2.200000f,var_42);
		pow_call_graph_wrapper(var_19,0.800000f,var_43);
		pow_call_graph_wrapper(var_22,3.000000f,var_44);
		pow_call_graph_wrapper(var_24,1.500000f,var_45);
		lerp_call_graph_wrapper(toFloat3(0.000000f),var_28,toFloat3(var_29),var_46);
		var_47 = var_30;
		var_48 = _make_expr_float3( var_47.xyz);
		_add_call_graph_wrapper(var_33,1.000000f,var_49);
		_subtract_call_graph_wrapper(1.000000f,var_33,var_50);
		sign_call_graph_wrapper(var_33,var_51);
		var_52 = TEXTURE_ARRAY_FETCH_LOD(8f0b1da8df486a941a5f2a91917ef4deff3baa5b, toInt2(var_35), int_zero, int_zero);
		_multiply_call_graph_wrapper(var_36,s_taa,var_53);
		var_54 = var_37;
		var_55 = _make_expr_float(1- var_54.x);
		_multiply_call_graph_wrapper(var_39,var_41,var_56);
		var_57 = var_29;
		var_58 = _make_expr_float(1- var_57.x);
		lerp_call_graph_wrapper(0.000000f,0.000000f,var_42,var_59);
		var_60 = var_43;
		var_61 = _make_expr_float(1- var_60.x);
		var_62 = var_44;
		var_63 = _make_expr_float(1- var_62.x);
		var_64 = var_45;
		var_65 = _make_expr_float(1- var_64.x);
		_dot_product_call_graph_wrapper(global_var_aa073e78ad728fe9cc8e46c0916ba6829899c10e,float3(0.000000f,0.000000f,1.000000f),var_66);
		_multiply_call_graph_wrapper(var_48,var_6,var_67);
		_multiply_call_graph_wrapper(var_32,2.000000f,var_68);
		_add_call_graph_wrapper(var_50,0.000100f,var_69);
		saturate_call_graph_wrapper(var_51,var_70);
		var_71 = var_52;
		var_72 = _make_expr_float3( var_71.xyz);
		var_73 = var_53;
		var_74 = _make_expr_float3( var_73.xxx);
		lerp_call_graph_wrapper(0.160000f,0.020000f,var_61,var_75);
		lerp_call_graph_wrapper(1.000000f,0.000000f,var_63,var_76);
		lerp_call_graph_wrapper(1.000000f,0.120000f,var_65,var_77);
		saturate_call_graph_wrapper(var_66,var_78);
		var_79 = var_67;
		var_80 = _make_expr_float3( var_79.xyz);
		_subtract_call_graph_wrapper(var_68,1.000000f,var_81);
		_divide_call_graph_wrapper(var_81,var_69,var_82);
		_add_call_graph_wrapper(var_72,var_74,var_83);
		lerp_call_graph_wrapper(var_59,var_75,var_20,var_84);
		lerp_call_graph_wrapper(var_76,var_77,var_25,var_85);
		_subtract_call_graph_wrapper(1.000000f,var_78,var_86);
		_multiply_call_graph_wrapper(var_81,var_49,var_87);
		_multiply_call_graph_wrapper(var_82,0.500000f,var_88);
		frac_call_graph_wrapper(var_83,var_89);
		var_90 = var_84;
		var_91 = _make_expr_float( var_90.x);
		var_92 = var_85;
		var_93 = _make_expr_float( var_92.x);
		pow_call_graph_wrapper(var_86,var_26,var_94);
		_multiply_call_graph_wrapper(var_87,0.500000f,var_95);
		_add_call_graph_wrapper(var_88,0.500000f,var_96);
		_add_call_graph_wrapper(var_95,0.500000f,var_97);
		var_98 = var_89;
		var_99 = _make_expr_float( var_98.x);
		lerp_call_graph_wrapper(var_91,var_93,var_94,var_100);
		lerp_call_graph_wrapper(var_97,var_96,var_70,var_101);
		saturate_call_graph_wrapper(var_101,var_102);
		_multiply_call_graph_wrapper(var_99,var_060e3d39f29b71c507b7a0fb80e61524ac9c683b,var_103);
		_multiply_call_graph_wrapper(var_99,1.000000f,var_104);
		lerp_call_graph_wrapper(var_060e3d39f29b71c507b7a0fb80e61524ac9c683b,var_103,var_4cdac0153caa090faae54c62fa3890ae41d1e7f2,var_105);
		lerp_call_graph_wrapper(1.000000f,var_104,var_4cdac0153caa090faae54c62fa3890ae41d1e7f2,var_106);
		_multiply_call_graph_wrapper(var_102,var_55196789dfd958401879ff2d0170cf1681da3dc9,var_107);
		saturate_call_graph_wrapper(var_107,var_108);
		lerp_call_graph_wrapper(var_46,var_80,toFloat3(var_108),var_109);
		lerp_call_graph_wrapper(var_8a30ff5a7440ac3d77a2fe80fdba8de3db38aa7c,1.000000f,var_108,var_110);
		var_111 = var_108;
		var_112 = _make_expr_float(1- var_111.x);
		_multiply_call_graph_wrapper(var_112,var_58,var_113);
		var_114 = var_113;
		var_115 = _make_expr_float(1- var_114.x);
		lerp_call_graph_wrapper(var_56,toFloat3(0.000000f),toFloat3(var_115),var_116);
		var_119 = global_var_1ef54606f6729c15f0c1cc8c36839aab613b28a0;
		unroll for(var_118 = 0; var_118 < 8; var_118++)
		{
			_multiply_call_graph_wrapper(var_118,var_118,var_120);
			_add_call_graph_wrapper(var_120,make_int(1),var_121);
			var_122 = make_int(8);
			var_123 = _make_expr_int( var_122.x-1);
			_multiply_call_graph_wrapper(var_105,toFloat(var_121),var_124);
			_multiply_call_graph_wrapper(var_106,toFloat(var_121),var_125);
			_equal_call_graph_wrapper(var_118,var_123,var_126);
			var_127 = var_126 ? 100000.000000f : var_125;
			var_128 = var_126 ? 100000.000000f : var_124;
			var_129 = var_127;
			var_130 = _make_expr_float( var_129.x);
			_multiply_call_graph_wrapper(var_34,toFloat3(var_128),var_131);
			_add_call_graph_wrapper(var_119,var_131,var_132);
			var_135 = var_132;
			unroll for(var_134 = 0; var_134 < 4; var_134++)
			{
				positionToScreenUV_call_graph_wrapper(var_135,var_136);
				length_call_graph_wrapper(var_135,var_137);
				var_138 = (TEXTURE_BIAS(tex_linear_depth, var_136, 0.000000f)).r;
				var_139 = var_138;
				var_140 = _make_expr_float( var_139.x);
				_subtract_call_graph_wrapper(var_140,var_137,var_141);
				clamp_call_graph_wrapper(var_141,0.000000f,var_128,var_142);
				_multiply_call_graph_wrapper(var_34,toFloat3(var_142),var_143);
				_add_call_graph_wrapper(var_135,var_143,var_144);
				var_135 = var_144;
				if (bool_zero) break;
			}
			var_145 = var_144;
			var_146 = _make_expr_float(- var_145.z);
			sign_call_graph_wrapper(var_146,var_147);
			saturate_call_graph_wrapper(var_147,var_148);
			positionToScreenUV_call_graph_wrapper(var_144,var_149);
			saturate_call_graph_wrapper(var_149,var_150);
			var_151 = (TEXTURE_BIAS(tex_linear_depth, var_150, 0.000000f)).r;
			var_152 = var_151;
			var_153 = _make_expr_float( var_152.x);
			rerange_call_graph_wrapper(var_150,0.000000f,1.000000f,-1.000000f,1.000000f,var_154);
			abs_call_graph_wrapper(var_154,var_155);
			rerange_call_graph_wrapper(var_155,var_55,1.000000f,1.000000f,0.000000f,var_156);
			saturate_call_graph_wrapper(var_156,var_157);
			var_158 = var_157;
			var_159 = _make_expr_float( var_158.x);
			length_call_graph_wrapper(var_144,var_160);
			var_161 = var_157;
			var_162 = _make_expr_float( var_161.y);
			_subtract_call_graph_wrapper(var_160,var_153,var_163);
			min_call_graph_wrapper(var_159,var_162,var_164);
			smoothstep_call_graph_wrapper(0.000000f,1.000000f,var_164,var_165);
			_less_call_graph_wrapper(var_163,var_130,var_166);
			_greater_call_graph_wrapper(var_163,0.000000f,var_167);
			_logical_and_call_graph_wrapper(var_167,var_166,var_168);
			_logical_and_call_graph_wrapper(var_168,toBool(var_148),var_169);
			min_call_graph_wrapper(toFloat(var_169),var_165,var_170);
			var_119 = var_144;
			if (toBool(var_170)) break;
		}
		var_171 = make_int(8);
		var_172 = _make_expr_int( var_171.x-1);
		positionToScreenUV_call_graph_wrapper(var_144,var_173);
		length_call_graph_wrapper(var_144,var_174);
		_equal_call_graph_wrapper(var_118,var_172,var_175);
		var_176 = (TEXTURE_BIAS(tex_linear_depth, var_173, 0.000000f)).r;
		var_177 = var_176;
		var_178 = _make_expr_float( var_177.x);
		_subtract_call_graph_wrapper(var_178,var_174,var_179);
		_multiply_call_graph_wrapper(var_34,toFloat3(var_179),var_180);
		var_181 = var_175 ? float3(0.000000f,0.000000f,0.000000f) : var_180;
		_add_call_graph_wrapper(var_144,var_181,var_182);
		positionToScreenUV_call_graph_wrapper(var_182,var_183);
		distance_call_graph_wrapper(global_var_1ef54606f6729c15f0c1cc8c36839aab613b28a0,var_182,var_184);
		_multiply_call_graph_wrapper(var_184,0.000000f,var_185);
		pow_call_graph_wrapper(var_185,0.500000f,var_186);
		_multiply_call_graph_wrapper(var_186,6.000000f,var_187);
		_add_call_graph_wrapper(var_187,0.000000f,var_188);
		var_189 = TEXTURE_BIAS(tex_screen_color_old_reprojection, var_183, var_188);
		var_190 = var_189;
		var_191 = _make_expr_float3( var_190.xyz);
		var_192 = toBool(var_170) ? var_191 : float3(0.000000f,0.000000f,0.000000f);
		var_193 = var_192;
		var_194 = _make_expr_float3( var_193.xyz);
		_multiply_call_graph_wrapper(var_194,toFloat3(var_170),var_195);
		var_196 = var_170;
		var_197 = _make_expr_float(1- var_196.x);
		lerp_call_graph_wrapper(var_195,toFloat3(0.000000f),toFloat3(var_108),var_198);
		lerp_call_graph_wrapper(var_197,1.000000f,var_108,var_199);
		lerp_call_graph_wrapper(var_116,var_198,toFloat3(var_100),var_200);
		var_201 = var_109;
		
		var_202 = var_110;
		
		var_203 = var_0afdf6074572a86081c3785fe8cc70369fee2bf4;
		
		var_204 = var_11;
		
		var_205 = var_199;
		
		var_206 = var_200;
		
		OUT_FRAG_ALBEDO = var_201;
		
		OUT_FRAG_ROUGHNESS = var_202;
		
		OUT_FRAG_SPECULAR = var_203;
		
		OUT_FRAG_NORMAL = mul3(var_204, rotate_view_to_tangent);
		OUT_FRAG_OCCLUSION = var_205;
		
		OUT_FRAG_EMISSION = var_206;
		
		
		
		#ifdef PASS_SHADOW && OPTION_TRANSPARENT
			OUT_FRAG_OPACITY_THRESHOLD = shadow_clip_threshold;
		#endif
		#ifdef PASS_AUXILIARY && (OPTION_TRANSPARENT || ALPHA_TEST)
			OUT_FRAG_OPACITY_THRESHOLD = auxiliary_clip_threshold;
		#endif
		
		#undef NORMAL_TS_UV1
		#undef NORMAL_TS_AUTO
	#}
}
